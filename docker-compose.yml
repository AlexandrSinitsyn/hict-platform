version: '3.9'

x-envs: &env
  env_file:
    - .env

x-kafka-setup: &kafka-setup
  # Listeners
  KAFKA_ZOOKEEPER_CONNECT: hict-zookeeper:2181
  ALLOW_PLAINTEXT_LISTENER: yes
  KAFKA_CFG_LISTENERS: BROKER://:9092
  KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:PLAINTEXT
  KAFKA_CFG_INTER_BROKER_LISTENER_NAME: BROKER
  # Clustering
  KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
  KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
  KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 2

networks:
  global:
    name: 'hict-global'
    driver: bridge
  internal:
    name: 'hict-internal'
    driver: bridge
  kafka-net:
    name: 'hict-kafka-net'
    driver: bridge
  db-net:
    name: 'hict-db-net'
    driver: bridge
  minio-net:
    name: 'hict-minio-net'
    driver: bridge

volumes:
  kafka-data-1:
    name: 'hict-kafka-data-1'
    driver: local
  kafka-data-2:
    name: 'hict-kafka-data-2'
    driver: local
  hict-postgres-data:
    name: 'hict-postgres-data'
  hict-minio-data:
    name: 'hict-minio-data'

name: 'hict-service'

services:

############### FRONTEND ###############

  frontend:
    container_name: 'hict-frontend'
    image: 'hict/frontend:${PROJECT_VERSION}'
    build:
      context: frontend
      dockerfile: Dockerfile
      args:
        PROJECT_VERSION: '${PROJECT_VERSION}'
        AUTH_HOST: '${APP_HOST}:${APP_PORT}/auth'
        SERVER_HOST: '${APP_HOST}:${APP_PORT}/server'
        NGINX_VERSION: '${NGINX_VERSION}'
    restart: always
    <<: *env
    expose:
      - '80'
    networks:
      global:
        aliases:
          - '${FRONTEND_HOST}'
    healthcheck:
      test: 'wget --no-verbose --tries=1 --spider http://localhost:80 || exit 1'
      interval: 2s
      timeout: 5s
      retries: 3
      start_period: 5s

############### PROXY ###############

  proxy:
    container_name: 'hict-proxy'
    image: 'hict/proxy:${PROJECT_VERSION}'
    build:
      context: nginx
      dockerfile: Dockerfile
      args:
        NGINX_VERSION: '${NGINX_VERSION}'
    restart: always
    <<: *env
    ports:
      - '${APP_PORT}:80'
    networks:
      - global
      - internal
    depends_on:
      frontend:
        condition: service_healthy
      authorization:
        condition: service_healthy
      server:
        condition: service_healthy

############### BACKEND ###############

  authorization:
    container_name: 'hict-authorization'
    image: 'hict/authorization:${PROJECT_VERSION}'
    build:
      context: backend
      dockerfile: authorization/Dockerfile
    restart: on-failure
    <<: *env
    expose:
      - '8090'
    networks:
      internal:
        aliases:
          - '${AUTHORIZATION_HOST}'
      db-net:
    healthcheck:
      test: 'wget --no-verbose --tries=1 --spider http://localhost:8090/actuator/health || exit 1'
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      postgres:
        condition: service_healthy
      liquibase:
        condition: service_completed_successfully

  server:
    container_name: 'hict-server'
    image: 'hict/server:${PROJECT_VERSION}'
    build:
      context: backend
      dockerfile: server/Dockerfile
    restart: on-failure
    <<: *env
    expose:
      - '8080'
    networks:
      internal:
        aliases:
          - '${SERVER_HOST}'
      kafka-net:
      db-net:
      minio-net:
    healthcheck:
      test: 'wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1'
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      postgres:
        condition: service_healthy
      liquibase:
        condition: service_completed_successfully

  scheduler:
    container_name: 'hict-scheduler'
    image: 'hict/scheduler:${PROJECT_VERSION}'
    build:
      context: backend
      dockerfile: scheduler/Dockerfile
    restart: on-failure
    <<: *env
    expose:
      - '8080'
    networks:
      - kafka-net
    healthcheck:
      test: 'wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1'
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      kafka-1:
        condition: service_started
      kafka-2:
        condition: service_started

############### BROKERS ###############

  zookeeper:
    container_name: 'hict-zookeeper'
    image: zookeeper:3.9.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    expose:
      - '2181'
    networks:
      - kafka-net

  kafka-1:
    container_name: 'hict-kafka-1'
    image: bitnami/kafka:3.6
    <<: *env
    environment:
      <<: *kafka-setup
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_ADVERTISED_LISTENERS: BROKER://hict-kafka-1:9092
    expose:
      - '9092'
    networks:
      - kafka-net
    volumes:
      - kafka-data-1:/bitnami/kafka
    depends_on:
      zookeeper:
        condition: service_started

  kafka-2:
    container_name: 'hict-kafka-2'
    extends:
      service: kafka-1
    environment:
      KAFKA_CFG_NODE_ID: 2
      KAFKA_CFG_ADVERTISED_LISTENERS: BROKER://hict-kafka-2:9092
    volumes:
      - kafka-data-2:/bitnami/kafka

############### DATA STORAGE ###############

  postgres:
    container_name: 'hict-database'
    image: postgres:${POSTGRES_VERSION}-alpine
    restart: always
    user: '${POSTGRES_USER}'
    <<: *env
    expose:
      - '5432'
    networks:
      db-net:
        aliases:
          - '${POSTGRES_HOST}'
    healthcheck:
      test: 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 15s
    volumes:
      - hict-postgres-data:/var/lib/postgresql/data

  liquibase:
    container_name: 'hict-liquibase'
    image: 'hict/migrations:${PROJECT_VERSION}'
    build:
      context: migrations
      dockerfile: Dockerfile
    restart: no
    <<: *env
    networks:
      - db-net
    depends_on:
      postgres:
        condition: service_healthy

  minio:
    container_name: 'hict-minio'
    image: 'minio/minio:${MINIO_VERSION}'
    command: server --address ":9000" --console-address ":9001" /data
    restart: always
    <<: *env
    expose:
      - '9000'
    ports:
      - '${MINIO_UI_PORT}:9001'
    networks:
      minio-net:
        aliases:
          - '${MINIO_HOST}'
    healthcheck:
      test: 'curl -f http://localhost:${MINIO_UI_PORT}/minio/health/live'
      interval: 5s
      timeout: 20s
      retries: 3
    volumes:
      - hict-minio-data:/data
