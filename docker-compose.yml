version: '3.9'

x-envs: &env
  env_file:
    - .env

networks:
  global:
    name: 'hict-global'
    driver: bridge
  internal:
    name: 'hict-internal'
    driver: bridge
  hict-cluster-net:
    name: 'hict-cluster-net'
    driver: bridge
  db-net:
    name: 'hict-db-net'
    driver: bridge
  s3-net:
    name: 'hict-s3-net'
    driver: bridge

volumes:
  hict-local-files:
    name: 'hict-local-files'
  hict-postgres-data:
    name: 'hict-postgres-data'
  hict-s3-data:
    name: 'hict-s3-data'

name: 'hict-service'

services:

############### FRONTEND ###############

  frontend:
    container_name: 'hict-frontend'
    image: 'hict/frontend:${PROJECT_VERSION}'
    build:
      context: frontend
      dockerfile: Dockerfile
      args:
        PROJECT_VERSION: '${PROJECT_VERSION}'
        AUTH_HOST: '${APP_HOST}:${APP_PORT}/auth'
        SERVER_HOST: '${APP_HOST}:${APP_PORT}/server'
        NGINX_VERSION: '${NGINX_VERSION}'
    restart: always
    <<: *env
    expose:
      - '80'
    networks:
      global:
        aliases:
          - '${FRONTEND_HOST}'
    healthcheck:
      test: 'wget --no-verbose --tries=1 --spider http://localhost:80 || exit 1'
      interval: 2s
      timeout: 5s
      retries: 3
      start_period: 5s

############### PROXY ###############

  proxy:
    container_name: 'hict-proxy'
    image: 'hict/proxy:${PROJECT_VERSION}'
    build:
      context: nginx
      dockerfile: Dockerfile
      args:
        NGINX_VERSION: '${NGINX_VERSION}'
    restart: always
    <<: *env
    ports:
      - '${APP_PORT}:80'
    networks:
      - global
      - internal
      - hict-cluster-net
    depends_on:
      frontend:
        condition: service_healthy
      authorization:
        condition: service_healthy
      server:
        condition: service_healthy

############### BACKEND ###############

  authorization:
    container_name: 'hict-authorization'
    image: 'hict/authorization:${PROJECT_VERSION}'
    build:
      context: backend
      dockerfile: authorization/Dockerfile
    restart: on-failure
    <<: *env
    expose:
      - '8090'
    networks:
      internal:
        aliases:
          - '${AUTHORIZATION_HOST}'
      db-net:
    healthcheck:
      test: 'wget --no-verbose --tries=1 --spider http://localhost:8090/actuator/health || exit 1'
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      postgres:
        condition: service_healthy
      liquibase:
        condition: service_completed_successfully

  server:
    container_name: 'hict-server'
    image: 'hict/server:${PROJECT_VERSION}'
    build:
      context: backend
      dockerfile: server/Dockerfile
    restart: on-failure
    <<: *env
    expose:
      - '8080'
    networks:
      internal:
        aliases:
          - '${SERVER_HOST}'
      db-net:
      s3-net:
    healthcheck:
      test: 'wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1'
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - hict-local-files:${SERVER_LOCAL_STORAGE_PATH}
    depends_on:
      postgres:
        condition: service_healthy
      liquibase:
        condition: service_completed_successfully
      s3:
        condition: service_healthy

  scheduler:
    container_name: 'hict-scheduler'
    image: 'hict/scheduler:${PROJECT_VERSION}'
    build:
      context: backend
      dockerfile: scheduler/Dockerfile
    restart: on-failure
    <<: *env
    user: root
    expose:
      - '8080'
      - '9090'
    networks:
      internal:
        aliases:
          - '${SCHEDULER_HOST}'
    healthcheck:
      test: 'wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1'
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro,Z

############### DATA STORAGE ###############

  postgres:
    container_name: 'hict-database'
    image: postgres:${POSTGRES_VERSION}-alpine
    restart: always
    user: '${POSTGRES_USER}'
    <<: *env
    expose:
      - '5432'
    networks:
      db-net:
        aliases:
          - '${POSTGRES_HOST}'
    healthcheck:
      test: 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 15s
    volumes:
      - hict-postgres-data:/var/lib/postgresql/data

  liquibase:
    container_name: 'hict-liquibase'
    image: 'hict/migrations:${PROJECT_VERSION}'
    build:
      context: migrations
      dockerfile: Dockerfile
    restart: no
    <<: *env
    networks:
      - db-net
    depends_on:
      postgres:
        condition: service_healthy

  s3:
    container_name: 'hict-s3'
    image: 'minio/minio:${MINIO_VERSION}'
    command: server --address ":9000" --console-address ":9001" /data
    restart: always
    <<: *env
    expose:
      - '9000'
    ports:
      - '${MINIO_UI_PORT}:9001'
    networks:
      s3-net:
        aliases:
          - '${MINIO_HOST}'
    healthcheck:
      test: 'curl -f http://localhost:${MINIO_UI_PORT}/minio/health/live'
      interval: 5s
      timeout: 20s
      retries: 3
    volumes:
      - hict-s3-data:/data
